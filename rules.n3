@prefix math: <http://www.w3.org/2000/10/swap/math#> .
@prefix owl: <http://www.w3.org/2002/07/owl#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .
@prefix string: <http://www.w3.org/2000/10/swap/string#> .
@prefix time: <http://www.w3.org/2006/time#> .

# If an interval is inside (bounded by) another interval (the bounding
# interval), then the bounding interval has a beginning and an end.
{
    ?i time:intervalIn ?bounds .

} => {
    ?bounds time:hasBeginning [] .
    ?bounds time:hasEnd [] .
} .

# If a dated interval is inside (bounded by) another interval (the
# bounding interval), the beginning and the end of the bounding
# interval can also be dated.
{
    ?i
      time:hasDateTimeDescription ?i_d ;
      time:intervalIn [
        time:hasBeginning ?bounds_b ;
        time:hasEnd ?bounds_e
      ] .

} => {
    ?bounds_b time:inDateTime [] .
    ?bounds_e time:inDateTime [] .
} .

# If a dated interval is inside (bounded by) another interval (the
# bounding interval), the dates of the beginning and the end of the
# bounding interval have the same day as the dated interval.
{
    ?i
      time:intervalIn ?bounds ;
      time:hasDateTimeDescription [ time:day ?d ] .

    ?bounds
      time:hasBeginning [ time:inDateTime ?c_b_d ] ;
      time:hasEnd [ time:inDateTime ?c_e_d ] .

} => {
    ?c_b_d time:day ?d .
    ?c_e_d time:day ?d .
} .

# If a dated interval is inside (bounded by) another interval (the
# bounding interval), the dates of the beginning and the end of the
# bounding interval have the same month as the dated interval.
{
    ?i
      time:intervalIn ?bounds ;
      time:hasDateTimeDescription [ time:month ?m ] .

    ?bounds
      time:hasBeginning [ time:inDateTime ?c_b_d ] ;
      time:hasEnd [ time:inDateTime ?c_e_d ] .

} => {
    ?c_b_d time:month ?m .
    ?c_e_d time:month ?m .
} .

# If a dated interval is inside (bounded by) another interval (the
# bounding interval), and the dated interval must have occurred before
# another interval, the bounding interval also must have occurred
# before that other interval.
{
    ?i1
      time:before ?i2 ;
      time:intervalIn ?i1_bounds .

} => {
    ?i1_bounds time:before ?i2 .
} .

# If a dated interval occurred before another dated interval, and the
# month of the earlier interval is greater than the month of the later
# interval, then year of the earlier interval is at most one less than
# the year of the later interval.
{
    ?i1 time:before ?i2 .

    ?i1 time:hasEnd [
      time:inDateTime ?i1_e_d
    ] .

    ?i1_e_d time:month ?i1_e_month .

    ?i2 time:hasDateTimeDescription [
      time:month ?i2_month ;
      time:year ?i2_year
    ] .

    ?i1_e_month math:greaterThan ?i2_month .

    ( ?i2_year 1 ) math:difference ?i1_e_year .

} => {
    ?i1_e_d time:year ?i1_e_year .
} .

# If a dated interval occurred before another dated interval, and the
# month of the earlier interval is less than the month of the later
# interval, then year of the earlier interval is at most the same as
# the year of the later interval.
{
    ?i1 time:before ?i2 .

    ?i1 time:hasEnd [
      time:inDateTime ?i1_e_d
    ] .

    ?i1_e_d time:month ?i1_e_month .

    ?i2 time:hasDateTimeDescription [
      time:month ?i2_month ;
      time:year ?i2_year
    ] .

    ?i1_e_month math:lessThan ?i2_month .

} => {
    ?i1_e_d time:year ?i2_year .
} .

# If a dated interval occurred before another dated interval, and the
# month of the earlier interval is the same as the month of the later
# interval, and the day of the earlier interval is greater than the
# day of the later interval, then year of the earlier interval is at
# most one less than the year of the later interval.
{
    ?i1 time:before ?i2 .

    ?i1 time:hasEnd [
      time:inDateTime ?i1_e_d
    ] .

    ?i1_e_d
      time:day ?i1_e_day ;
      time:month ?i1_e_month .

    ?i2 time:hasDateTimeDescription [
      time:day ?i2_day ;
      time:month ?i2_month ;
      time:year ?i2_year
    ] .

    ?i1_e_month math:equalTo ?i2_month .
    ?i1_e_day math:greaterThan ?i2_day .

    ( ?i2_year 1 ) math:difference ?i1_e_year .

} => {
    ?i1_e_d time:year ?i1_e_year .
} .

# If a dated interval occurred before another dated interval, and the
# month of the earlier interval is the same as the month of the later
# interval, and the day of the earlier interval is not greater than
# the day of the later interval, then year of the earlier interval is
# at most the same as the year of the later interval.
{
    ?i1 time:before ?i2 .

    ?i1 time:hasEnd [
      time:inDateTime ?i1_e_d
    ] .

    ?i1_e_d
      time:day ?i1_e_day ;
      time:month ?i1_e_month .

    ?i2 time:hasDateTimeDescription [
      time:day ?i2_day ;
      time:month ?i2_month ;
      time:year ?i2_year
    ] .

    ?i1_e_month math:equalTo ?i2_month .
    ?i1_e_day math:notGreaterThan ?i2_day .

} => {
    ?i1_e_d time:year ?i2_year .
} .

# If an interval has a known duration in years, and the maximum
# temporal bound on the finish of the interval is dated, the a date for
# the maximum temporal bound of the start of the interval can be
# inferred.
{
    ?i
      time:intervalStartedBy ?s ;
      time:intervalFinishedBy ?f ;
      time:hasDurationDescription [
        time:years ?years
      ] .

    ?s time:intervalIn ?s_bounds .
    ?f time:intervalIn ?f_bounds .

    ?f_bounds time:hasEnd ?f_e .
    ?s_bounds time:hasEnd ?s_e .

    ?f_e time:inDateTime  [
      time:day ?f_e_d ;
      time:month ?f_e_m ;
      time:year ?f_e_y
    ] .

    ( ?f_e_y ?years ) math:difference ?s_e_y .

} => {
    ?s_e time:inDateTime [
      time:day ?f_e_d ;
      time:month ?f_e_m ;
      time:year ?s_e_y
    ] .
} .

# If an interval has a known duration in years, and the year of start
# of the interval is known, then the year of the finish of interval
# can be inferred.
{
    ?i
      time:intervalStartedBy ?s ;
      time:intervalFinishedBy ?f ;
      time:hasDurationDescription [
        time:years ?years
      ] .

    ?s time:hasDateTimeDescription  [
      time:year ?s_y
    ] .

    ?f time:hasDateTimeDescription ?f_d .

    ( ?s_y ?years ) math:sum ?f_y .

} => {
    ?f_d time:year ?f_y .
} .

# Label the beginnings and ends of intervals.
{
    ?i
      rdfs:label ?label ;
      time:hasBeginning ?b ;
      time:hasEnd ?e .

    ( "beginning of " ?label ) string:concatenation ?b_label .
    ( "end of " ?label ) string:concatenation ?e_label .

} => {
     ?b rdfs:label ?b_label .
     ?e rdfs:label ?e_label .
} .

# Label the dates of the beginnings of intervals.
{
    ?i
      rdfs:label ?label ;
      time:intervalIn [
        time:hasBeginning [ time:inDateTime ?b_d ]
      ] .

    ( "earliest date of the " ?label ) string:concatenation ?b_d_label .

} => {
     ?b_d rdfs:label ?b_d_label .
} .

# Label the dates of the ends of intervals.
{
    ?i
      rdfs:label ?label ;
      time:intervalIn [
        time:hasEnd [ time:inDateTime ?e_d ]
      ] .

    ( "latest date of the " ?label ) string:concatenation ?e_d_label .

} => {
     ?e_d rdfs:label ?e_d_label .
} .
